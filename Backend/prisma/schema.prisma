generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  AdminID        Int              @id @default(autoincrement())
  AdminName      String           @db.VarChar(100)
  Password       String           @db.VarChar(255)
  isActive       Boolean
  CreatedAt      DateTime         @default(now()) @db.Timestamp(0)
  articleedits   articleedits[]
  healtharticles healtharticles[]
  videoarticles  videoarticles[]
}

model articleedits {
  EditID          Int            @id @default(autoincrement())
  HealthArticleID Int
  AdminID         Int
  EditDate        DateTime       @default(now()) @db.Timestamp(0)
  EditDescription String?        @db.Text
  healtharticles  healtharticles @relation(fields: [HealthArticleID], references: [HealthArticleID], onDelete: Cascade, onUpdate: Restrict, map: "articleedits_ibfk_1")
  admins          admins         @relation(fields: [AdminID], references: [AdminID], onUpdate: Restrict, map: "articleedits_ibfk_2")

  @@index([AdminID], map: "AdminID")
  @@index([HealthArticleID], map: "HealthArticleID")
}

model categories {
  CategoryID   Int        @id @default(autoincrement())
  CategoryName String     @db.VarChar(100)
  diseases     diseases[]
}

model disease_medications {
  DiseaseID    Int
  MedicationID Int
  diseases     diseases    @relation(fields: [DiseaseID], references: [DiseaseID], onDelete: Cascade, onUpdate: Restrict, map: "disease_medications_ibfk_1")
  medications  medications @relation(fields: [MedicationID], references: [MedicationID], onDelete: Cascade, onUpdate: Restrict, map: "disease_medications_ibfk_2")

  @@id([DiseaseID, MedicationID])
  @@index([MedicationID], map: "MedicationID")
}

model disease_treatments {
  DiseaseID   Int
  TreatmentID Int
  diseases    diseases   @relation(fields: [DiseaseID], references: [DiseaseID], onDelete: Cascade, onUpdate: Restrict, map: "disease_treatments_ibfk_1")
  treatments  treatments @relation(fields: [TreatmentID], references: [TreatmentID], onDelete: Cascade, onUpdate: Restrict, map: "disease_treatments_ibfk_2")

  @@id([DiseaseID, TreatmentID])
  @@index([TreatmentID], map: "TreatmentID")
}

model diseases {
  DiseaseID           Int                   @id @default(autoincrement())
  DiseaseName         String                @db.VarChar(255)
  Description         String?               @db.Text
  CategoryID          Int
  ICD10_Code          String?               @db.VarChar(20)
  RiskFactors         String                @db.Text
  Prevention          String                @db.Text
  Symptoms            String                @db.Text
  Diagnosis           String                @db.Text
  disease_medications disease_medications[]
  disease_treatments  disease_treatments[]
  categories          categories            @relation(fields: [CategoryID], references: [CategoryID], onUpdate: Restrict, map: "diseases_ibfk_1")
  healtharticles      healtharticles[]

  @@index([CategoryID], map: "CategoryID")
}

model feedbacks {
  FeedbackID      Int             @id @default(autoincrement())
  FeedbackText    String          @db.Text
  CreatedAt       DateTime        @default(now()) @db.Timestamp(0)
  HealthArticleID Int?
  healtharticles  healtharticles? @relation(fields: [HealthArticleID], references: [HealthArticleID], onDelete: Restrict, onUpdate: SetNull, map: "feedbacks_ibfk_1")

  @@index([HealthArticleID], map: "HealthArticleID")
}

model healtharticles {
  HealthArticleID Int            @id @default(autoincrement())
  DiseaseID       Int
  AdminID         Int
  ImageID         Int
  VideoID         Int
  Views           Int
  CreatedAt       DateTime       @default(now()) @db.Timestamp(0)
  isActive        Boolean
  articleedits    articleedits[]
  feedbacks       feedbacks[]
  diseases        diseases       @relation(fields: [DiseaseID], references: [DiseaseID], onDelete: Cascade, onUpdate: Restrict, map: "healtharticles_ibfk_1")
  imagelibrary    imagelibrary   @relation(fields: [ImageID], references: [ImageID], onUpdate: Restrict, map: "healtharticles_ibfk_2")
  videolibrary    videolibrary   @relation(fields: [VideoID], references: [VideoID], onUpdate: Restrict, map: "healtharticles_ibfk_3")
  admins          admins         @relation(fields: [AdminID], references: [AdminID], onUpdate: Restrict, map: "healtharticles_ibfk_4")

  @@index([AdminID], map: "AdminID")
  @@index([DiseaseID], map: "DiseaseID")
  @@index([ImageID], map: "ImageID")
  @@index([VideoID], map: "VideoID")
}

model imagelibrary {
  ImageID        Int              @id @default(autoincrement())
  ImageName      String           @db.VarChar(255)
  ImageURL       String           @db.VarChar(255)
  Credit         String           @db.VarChar(255)
  healtharticles healtharticles[]
  videoarticles  videoarticles[]
}

model medications {
  MedicationID        Int                   @id @default(autoincrement())
  MedicationName      String                @db.VarChar(255)
  GenericName         String?               @db.VarChar(255)
  DosageForm          String?               @db.VarChar(50)
  Strength            String?               @db.VarChar(50)
  Indications         String?               @db.Text
  SideEffects         String?               @db.Text
  Contraindications   String?               @db.Text
  disease_medications disease_medications[]
}

model treatments {
  TreatmentID        Int                  @id @default(autoincrement())
  TreatmentName      String               @db.VarChar(255)
  Description        String?              @db.Text
  Procedures         String?              @db.Text
  Duration           String?              @db.VarChar(50)
  SideEffects        String?              @db.Text
  Contraindications  String?              @db.Text
  disease_treatments disease_treatments[]
}

model videoarticles {
  VideoArticleID Int          @id @default(autoincrement())
  ImageID        Int
  VideoID        Int
  AdminID        Int
  Title          String
  Description    String
  Views          Int
  CreatedAt      DateTime     @default(now()) @db.Timestamp(0)
  UpdatedAt      DateTime     @updatedAt
  isActive       Boolean
  imagelibrary   imagelibrary @relation(fields: [ImageID], references: [ImageID], onUpdate: Restrict, map: "imagearticles_ibfk_1")
  videolibrary   videolibrary @relation(fields: [VideoID], references: [VideoID], onUpdate: Restrict, map: "videoarticles_ibfk_1")
  admins         admins       @relation(fields: [AdminID], references: [AdminID], onUpdate: Restrict, map: "videoarticles_ibfk_2")

  @@index([VideoID], map: "VideoID")
  @@index([AdminID], map: "AdminID")
  @@index([ImageID], map: "imagearticles_ibfk_1")
}

model videolibrary {
  VideoID        Int              @id @default(autoincrement())
  VideoName      String           @db.VarChar(255)
  VideoURL       String           @db.VarChar(255)
  healtharticles healtharticles[]
  videoarticles  videoarticles[]
}
